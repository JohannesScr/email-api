-- ########################################################## --
-- #################### ASSISTING TABLES #################### --
-- ########################################################## --

DROP TABLE IF EXISTS tb_status CASCADE;
CREATE TABLE IF NOT EXISTS tb_status (
  id           SERIAL PRIMARY KEY,
  status_code  VARCHAR(32) UNIQUE,
  status_name  VARCHAR(64),
  description  VARCHAR(256),
  active       BOOLEAN,
  created_date TIMESTAMP DEFAULT current_timestamp(0),
  updated_date TIMESTAMP DEFAULT current_timestamp(0)
);

-- ################################################ --
-- #################### TABLES #################### --
-- ################################################ --

DROP TABLE IF EXISTS tb_token CASCADE;
CREATE TABLE IF NOT EXISTS tb_token (
  id            SERIAL PRIMARY KEY,
  token_code    VARCHAR(32) UNIQUE,
  api_name      VARCHAR(128),
  api_key       VARCHAR(64),
  active        BOOLEAN,
  creation_date TIMESTAMP DEFAULT current_timestamp(0),
  update_date   TIMESTAMP DEFAULT current_timestamp(0)
);

DROP TABLE IF EXISTS tb_batch CASCADE;
CREATE TABLE IF NOT EXISTS tb_batch (
  id           SERIAL PRIMARY KEY,
  token_code   VARCHAR(32) REFERENCES tb_token (token_code),
  batch_count  VARCHAR(32),
  active       BOOLEAN,
  created_date TIMESTAMP DEFAULT current_timestamp(0),
  updated_date TIMESTAMP DEFAULT current_timestamp(0)
);

DROP TABLE IF EXISTS tb_template CASCADE;
CREATE TABLE IF NOT EXISTS tb_template (
  id            SERIAL PRIMARY KEY,
  template_code VARCHAR(32) UNIQUE,
  template_name VARCHAR(64),
  description   VARCHAR(256),
  template_data TEXT,
  active        BOOLEAN,
  created_date  TIMESTAMP DEFAULT current_timestamp(0),
  updated_date  TIMESTAMP DEFAULT current_timestamp(0)
);

DROP TABLE IF EXISTS tb_email_log CASCADE;
CREATE TABLE IF NOT EXISTS tb_email_log (
  id            SERIAL PRIMARY KEY,
  template_code VARCHAR(32) REFERENCES tb_template (template_code),
  token_code    VARCHAR(32) REFERENCES tb_token (token_code),
  email_from    JSONB,
  email_to      JSONB,
  status_code   VARCHAR(32) REFERENCES tb_status (status_code),
  action_date   VARCHAR(256),
  email_cc      JSONB,
  email_bcc     JSONB,
  email_data    JSONB,
  active        BOOLEAN,
  created_date  TIMESTAMP DEFAULT current_timestamp(0),
  updated_date  TIMESTAMP DEFAULT current_timestamp(0)
);

-- ################################################## --
-- #################### TRIGGERS #################### --
-- ################################################## --

CREATE OR REPLACE FUNCTION set_updated_date_column()
  RETURNS TRIGGER LANGUAGE plpgsql AS $$
BEGIN
  NEW.updated_on = now();
  RETURN NEW;
END;
$$;

DO LANGUAGE plpgsql $$

DECLARE t record;

BEGIN
  FOR t IN (SELECT *
            FROM information_schema.tables AS info_tables
            WHERE info_tables.table_schema = 'public')
  LOOP
    EXECUTE format(' CREATE TRIGGER set_updated_date_column ' ||
                   ' BEFORE UPDATE ON %I FOR EACH ROW EXECUTE PROCEDURE set_updated_date_column()', t.table_name);
  END LOOP;
END;
$$;
-- The long way is to set each one on its own
-- CREATE TRIGGER set_updated_date_column BEFORE UPDATE ON tb_template FOR EACH ROW EXECUTE PROCEDURE set_updated_date_column();